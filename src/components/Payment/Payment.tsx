
import React, { useState } from 'react';
import { coursesData } from '../../data/courses.js';
import { useAuth } from '../../contexts/AuthContext';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { toast } from 'sonner';

interface PaymentProps {
  courseId: number;
  onNavigate: (page: string, courseId?: number) => void;
}

const Payment: React.FC<PaymentProps> = ({ courseId, onNavigate }) => {
  const course = coursesData.find(c => c.id === courseId);
  const { enrollCourse } = useAuth();
  
  const [paymentMethod, setPaymentMethod] = useState('card');
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    cardNumber: '',
    expiryDate: '',
    cvv: '',
    cardName: '',
    email: '',
    phone: ''
  });

  if (!course) {
    return (
      <div className="text-center py-12">
        <p className="text-gray-500">Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc</p>
        <Button onClick={() => onNavigate('courses')} className="mt-4">
          Quay l·∫°i danh s√°ch kh√≥a h·ªçc
        </Button>
      </div>
    );
  }

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    
    // Format card number
    if (name === 'cardNumber') {
      const formatted = value.replace(/\s/g, '').replace(/(.{4})/g, '$1 ').trim();
      if (formatted.length <= 19) {
        setFormData({ ...formData, [name]: formatted });
      }
      return;
    }
    
    // Format expiry date
    if (name === 'expiryDate') {
      const formatted = value.replace(/\D/g, '').replace(/(\d{2})(\d)/, '$1/$2');
      if (formatted.length <= 5) {
        setFormData({ ...formData, [name]: formatted });
      }
      return;
    }
    
    // Format CVV
    if (name === 'cvv') {
      const formatted = value.replace(/\D/g, '');
      if (formatted.length <= 3) {
        setFormData({ ...formData, [name]: formatted });
      }
      return;
    }
    
    setFormData({ ...formData, [name]: value });
  };

  const validateForm = () => {
    if (paymentMethod === 'card') {
      if (!formData.cardNumber || formData.cardNumber.replace(/\s/g, '').length < 16) {
        toast.error('Vui l√≤ng nh·∫≠p s·ªë th·∫ª h·ª£p l·ªá');
        return false;
      }
      if (!formData.expiryDate || formData.expiryDate.length < 5) {
        toast.error('Vui l√≤ng nh·∫≠p ng√†y h·∫øt h·∫°n h·ª£p l·ªá');
        return false;
      }
      if (!formData.cvv || formData.cvv.length < 3) {
        toast.error('Vui l√≤ng nh·∫≠p m√£ CVV h·ª£p l·ªá');
        return false;
      }
      if (!formData.cardName.trim()) {
        toast.error('Vui l√≤ng nh·∫≠p t√™n ch·ªß th·∫ª');
        return false;
      }
    }
    
    if (!formData.email || !formData.email.includes('@')) {
      toast.error('Vui l√≤ng nh·∫≠p email h·ª£p l·ªá');
      return false;
    }
    
    return true;
  };

  const handlePayment = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setLoading(true);
    
    // Simulate payment processing
    setTimeout(() => {
      enrollCourse(courseId);
      setLoading(false);
      toast.success('Thanh to√°n th√†nh c√¥ng! Ch√∫c m·ª´ng b·∫°n ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc.');
      onNavigate('course-detail', courseId);
    }, 2000);
  };

  return (
    <div className="max-w-4xl mx-auto">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Payment Form */}
        <div>
          <Card>
            <CardHeader>
              <CardTitle>Th√¥ng tin thanh to√°n</CardTitle>
              <CardDescription>
                Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n v√† ƒëi·ªÅn th√¥ng tin
              </CardDescription>
            </CardHeader>
            <CardContent>
              <form onSubmit={handlePayment} className="space-y-6">
                {/* Payment Methods */}
                <div>
                  <Label className="text-base font-medium">Ph∆∞∆°ng th·ª©c thanh to√°n</Label>
                  <RadioGroup value={paymentMethod} onValueChange={setPaymentMethod} className="mt-2">
                    <div className="flex items-center space-x-2 p-3 border rounded-lg">
                      <RadioGroupItem value="card" id="card" />
                      <Label htmlFor="card" className="flex items-center gap-2 cursor-pointer">
                        <span>üí≥</span>
                        Th·∫ª t√≠n d·ª•ng / Th·∫ª ghi n·ª£
                      </Label>
                    </div>
                    <div className="flex items-center space-x-2 p-3 border rounded-lg">
                      <RadioGroupItem value="ewallet" id="ewallet" />
                      <Label htmlFor="ewallet" className="flex items-center gap-2 cursor-pointer">
                        <span>üì±</span>
                        V√≠ ƒëi·ªán t·ª≠ (MoMo, ZaloPay)
                      </Label>
                    </div>
                    <div className="flex items-center space-x-2 p-3 border rounded-lg">
                      <RadioGroupItem value="bank" id="bank" />
                      <Label htmlFor="bank" className="flex items-center gap-2 cursor-pointer">
                        <span>üè¶</span>
                        Chuy·ªÉn kho·∫£n ng√¢n h√†ng
                      </Label>
                    </div>
                  </RadioGroup>
                </div>

                {/* Card Payment Form */}
                {paymentMethod === 'card' && (
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="cardNumber">S·ªë th·∫ª</Label>
                      <Input
                        id="cardNumber"
                        name="cardNumber"
                        placeholder="1234 5678 9012 3456"
                        value={formData.cardNumber}
                        onChange={handleInputChange}
                        required
                      />
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="expiryDate">Ng√†y h·∫øt h·∫°n</Label>
                        <Input
                          id="expiryDate"
                          name="expiryDate"
                          placeholder="MM/YY"
                          value={formData.expiryDate}
                          onChange={handleInputChange}
                          required
                        />
                      </div>
                      <div>
                        <Label htmlFor="cvv">CVV</Label>
                        <Input
                          id="cvv"
                          name="cvv"
                          placeholder="123"
                          value={formData.cvv}
                          onChange={handleInputChange}
                          required
                        />
                      </div>
                    </div>
                    
                    <div>
                      <Label htmlFor="cardName">T√™n ch·ªß th·∫ª</Label>
                      <Input
                        id="cardName"
                        name="cardName"
                        placeholder="NGUYEN VAN A"
                        value={formData.cardName}
                        onChange={handleInputChange}
                        required
                      />
                    </div>
                  </div>
                )}

                {/* E-wallet Info */}
                {paymentMethod === 'ewallet' && (
                  <div className="p-4 bg-blue-50 rounded-lg">
                    <p className="text-sm text-blue-800">
                      B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng ƒë·∫øn ·ª©ng d·ª•ng v√≠ ƒëi·ªán t·ª≠ ƒë·ªÉ ho√†n t·∫•t thanh to√°n.
                    </p>
                  </div>
                )}

                {/* Bank Transfer Info */}
                {paymentMethod === 'bank' && (
                  <div className="p-4 bg-green-50 rounded-lg">
                    <p className="text-sm text-green-800 mb-2">Th√¥ng tin chuy·ªÉn kho·∫£n:</p>
                    <div className="text-sm space-y-1">
                      <p><strong>Ng√¢n h√†ng:</strong> Vietcombank</p>
                      <p><strong>S·ªë t√†i kho·∫£n:</strong> 1234567890</p>
                      <p><strong>Ch·ªß t√†i kho·∫£n:</strong> C√îNG TY E-LEARNING</p>
                      <p><strong>N·ªôi dung:</strong> Thanh toan khoa hoc {courseId}</p>
                    </div>
                  </div>
                )}

                {/* Contact Info */}
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="email">Email</Label>
                    <Input
                      id="email"
                      name="email"
                      type="email"
                      placeholder="email@example.com"
                      value={formData.email}
                      onChange={handleInputChange}
                      required
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i</Label>
                    <Input
                      id="phone"
                      name="phone"
                      placeholder="0123456789"
                      value={formData.phone}
                      onChange={handleInputChange}
                    />
                  </div>
                </div>

                <Button
                  type="submit"
                  className="w-full btn-gradient"
                  disabled={loading}
                  size="lg"
                >
                  {loading ? 'ƒêang x·ª≠ l√Ω...' : `Thanh to√°n ${formatPrice(course.price)}`}
                </Button>
              </form>
            </CardContent>
          </Card>
        </div>

        {/* Order Summary */}
        <div>
          <Card className="sticky top-4">
            <CardHeader>
              <CardTitle>Th√¥ng tin ƒë∆°n h√†ng</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="aspect-video rounded-lg overflow-hidden">
                <img
                  src={course.image}
                  alt={course.title}
                  className="w-full h-full object-cover"
                />
              </div>
              
              <div>
                <h3 className="font-semibold text-lg">{course.title}</h3>
                <p className="text-gray-600 text-sm mt-1">{course.description}</p>
              </div>
              
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span>Gi·∫£ng vi√™n:</span>
                  <span>{course.instructor}</span>
                </div>
                <div className="flex justify-between">
                  <span>Th·ªùi l∆∞·ª£ng:</span>
                  <span>{course.duration}</span>
                </div>
                <div className="flex justify-between">
                  <span>S·ªë b√†i h·ªçc:</span>
                  <span>{course.lessons.length} b√†i</span>
                </div>
                <div className="flex justify-between">
                  <span>C·∫•p ƒë·ªô:</span>
                  <span>{course.level}</span>
                </div>
              </div>
              
              <div className="border-t pt-4">
                <div className="flex justify-between items-center text-lg font-semibold">
                  <span>T·ªïng c·ªông:</span>
                  <span className="text-elearning-primary">{formatPrice(course.price)}</span>
                </div>
              </div>
              
              <div className="text-xs text-gray-500">
                <p>‚úì Truy c·∫≠p tr·ªçn ƒë·ªùi</p>
                <p>‚úì Ch·ª©ng ch·ªâ ho√†n th√†nh</p>
                <p>‚úì H·ªó tr·ª£ 24/7</p>
                <p>‚úì Ho√†n ti·ªÅn trong 30 ng√†y</p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default Payment;
